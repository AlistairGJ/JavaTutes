
Q1. Polymorphism
You have different types of objects, but they have a common interface. Interface = the way we interact with them. 
e.g., you have two shapes (a square and circle). You could interact with them by telling them to draw. THe draw command on both of them is the same, but the outcome is different.

Q2. Dynamic Binding - 'The technology that allows us to have polymorphism'
- Lists do preserve order (but in other structures like sets, dictionaries, order may not be preserved...)
- "The ability for the interpreter to select which method to run at RUN time, instead of COMPILE time"

Q3. Typecasting
- Converting from one data type into antoher data type
- e.g., double into an int
- "Telling the compiler that something is a different type"

Q4. instanceof
- A boolean expression that tells you if an object is of a certain type.
- If yes return TRUE ...

Q5. Visibility - Private / Protected / Public
Private; Visible within just that class...
Proteced; Visible to subclasses (of whatever class it is defined in)
Public; Visible everywhere

Q6. Abstract Class
- A class (who's only job is to be a parent class), that you cannot make an instance of. For example shape class.

Q7. Restrictions on a subclass in an abstract class
You have to IMPLEMENT the abstract methods in the subclass - this is the rule. E.g., Abstract class Shape has a draw funtciton, the subclasses must also implemented. You can have non-abstract methods in the abstract class, this does not have to implemented in the subclasses.

Q8. Interface & when should you use one?

public class NewClass
{
	double newMethod();
	// Without a body / implementation
}

public class NewClass
{
	double newMethod()
	{
		//With a body
	}
	
}

Interfaces only allow you to do the FIRST style, in an INTERFACE...

Querying an object to see if it has a certain type of functionality. If it does them we can access that functionality.

Question 2 - Steps.
- Thought about what classes I would need
- Thought about commonality between the classes
- Thought about what fields I would need and what the commonality was
- Making the classes
	- Name (logical)
	- Fields, name + type (logic)
	- Constructor for fields
	- Methods
	- Accessors (getters) / mutators [may not always happen...]
	- Thinking about the relationship between the classes
		- Who is the parent of each class
	- There is an abstract method in my abstract class
	- Implemented abstract methods in child classes


USER STORIES ...
I want a 
I want to know which system I can use today (requirement)
User Story = the sequence of steps in the IDEALIZED world they go through to meet a requirement (if you worry about now, it may corrupt the 'ideal' situation).

- User Story  / Use Case
- A sequence of steps
	- Who
	- What they do
	- Who 
	- What they do
	- e.t.c.,
	
- "The user logs into the system"
- The system presents the home page
- "The user navigates to the equipment page"
- The system presents the equipment page
- "The user indicates what type of analysis they want to perform and when they want to perform it"
- The system shows which equipment is available
END OF STORY 1
- Each line refers to an actor
- Each line refers to an action that is performed (verbs)
- Actor and a direction for them to follow

Story 2 - User booking equipment (to be continued)
- Can refer to first story, then extend

NEXT
- Create all the stories for situations where things don't go smoothly
- By the time finished writting out, will have all actors (blah blah)





















