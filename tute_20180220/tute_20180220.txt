1. Inner Classes
- Embedding one class within another
- Why is it useful... (there is NO performance penalty)
a. Only call an inner class when a certain event happens ('Only need the 
class to handle a single event') - more generally, 'only the class within the 
context of the outer class'
b. We can prevent other classes accidentally using this class ('may be useful to us in a particular context, when don't want to have to think / worry about all the things other classes may ask of this class)
- 'When you make a PUBLIC class, you make it to be BULLETPROOF'
---> e.g., special checks and so on

Also - avoids pulluting your namespace
- Global Namespace = All the things that are available everywhere (PUBLIC), and you want to 'keep this clean' (V. important when dealing with large projects)
- Keeping things in managable chunks

2. How do Private Inner Classes make the OO more maintainable
As above.

3. What are the benefits of anonymous classes
- A class that doesn't have a name
- You will construct this class only once, as it is being defined
- Useful for sorting algorithms, event handlers
- Has all the properties of an inner class, but can only be constructed once (and has no name)

4. What is an exception
- A type of runtime error
- It will work, but in certain conditions it wont work
- E.g., 1 - where code works 100% - a network cable is unplugged and data cannot be retreived
---> Not to be used when dealing with shit code, more for problems beyond our control

5. How do you handle an exception in a program where it occurs?
- 'Try catch' block

try
{
// Some Code
}

catch (Exception ex)
{
// Handle error somehow
}

finally
{
// Stuff to do whether an exception was handled or not
}

Like an IF, THEN, ELSE - except the IF is an error happening
try, catch and finally are KEYWORDS
---> In finally, this would be a good place to close the file
---> Should close wether the thing works or does not work (would NOT want to leave the file open)
---> Finally block is OPTIONAL (like how else is optional in an IF)

- Can have multiple catch's, one after the other, all can handle different types of exceptions
- When their is an error / exception thrown, will try to match exception type
"Object is the parent of all classes"
"Exception is the parent of all specific exceptions"
---> E.g., 'FileNotFoundException'
- Would have exception LAST (as in the parent of all exceptions, so it would match ANY exception and render the process ineffective at narrowing down)
- try, catch, finally
ONE try, ONE finally, but can have many catch

---> In practice we generally aren't to fussed about the kind of exception

6. What is exception propagation and how does it work?
When an exception propagates up the stack until it reaches a try, catch (with a matching catch, e.g., FileNotFoundException)

-- "Call stack"
---> All programs start at main
---> Main can call other methods
---> These methods can call other methods
---> e.c.t.,

'Each level of inception is considered further down the call stack'
https://www3.ntu.edu.sg/home/ehchua/programming/java/images/Exception_MethodCallStack.png
http://www3.ntu.edu.sg/home/ehchua/programming/java/images/Exception_CallStack.png

7. Custom Exceptions
- Need a new class
- You have to extend the Exception class
- You need to know the details of what the error could be
---> 'All exceptions have a message'

- Specificity (value in have bespoke Exception classes)
+ can add your own extra information! E.g., network timeout, could include the number of times connection was attempted before it gave up (useful info)


8. How do you open text files for reading and writing

import os text
-- Most basic way = use a file reader or writer
- Can use a buffered reader

9. How do you read different types of data from a text file
- Need to parse into different types
- Syntax 

---- integer.parseint
---- integer.tryParseint

- EXTENSION Data needs to be structured

10. How does random access file differ from text files?
- For a non RA file, you read from 'top to bottom'
- RA file, can access any part of the file at any time

11. Close the file!!!!! After you finish whatever you are doing. 
- If you have a file open for writing, no other program can access it until you close it.


int theValue = 30; 

try
{
	System.out.println("Block entered"); 
	if (theValue > 10)
		throw new Exception ("Value exceeded"); 
	System.out.println("Leaving try block");
}
catch (Exception e)
{
System.out.println("Exception occurred: "
+ e.getMessage());
}
System.out.println("After catch block");







































